<?php

namespace TelegramBot;

use TelegramBot\ContentExtractor;

class BotTemplates
{

    /**
     * @var BotConfig 
     */
    protected $configuration;

    public function __construct(BotConfig $configuration)
    {
        $this->configuration = $configuration;
    }

    /**
     * @param array $newUser
     * @param ContentExtractor $extractor
     * @param bool $isFriendGroup
     * @return string
     */
    public function getWelcomeMessage(array $newUser, ContentExtractor $extractor, $isFriendGroup): string
    {
        if ($isFriendGroup == true) {
            return $this->getWelcomeMessageForFriendGroup($newUser, $extractor);
        }
        return $this->getWelcomeMessageForOwnGroup($newUser, $extractor);
    }

    /**
     * @param array $newUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getWelcomeMessageForOwnGroup(array $newUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($newUser);
        $id = $extractor->getIdFromUser($newUser);
        $message = "
      ‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì[" . $this->configuration->getWelcomeUserName() .
                "](tg://user?id=" . $this->configuration->getWelcomeUserId() . ")‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì:
–ü–†–ò–í–ï–¢–ò–ö [" . $name . "](tg://user?id=" . $id .
                ") ‚ò∫Ô∏èüòò!   –ü—É—Å—Ç—å —Å—á–∞—Å—Ç—å–µ ‚ù§Ô∏è–±—É–¥–µ—Ç –±–µ–∑ –≤—Å—è–∫–∏—Ö —É—Å–ª–æ–≤–∏–π: –±–µ–∑ —Å–∫–æ–±–æ–∫,üòä –∫–∞–≤—ã—á–µ–∫,üòä –ø—Ä–æ–±–µ–ª–æ–≤ üòä–∏ —Ç–æ—á–µ–∫. –¶–µ–Ω–∏—Ç–µ —Ç–µ—Ö, —Å –∫–µ–º –º–æ–∂–Ω–æ –±—ã—Ç—å —Å–æ–±–æ–π.ü§ó –ë–µ–∑ –º–∞—Å–æ–∫,üòâ –Ω–µ–¥–æ–º–æ–ª–≤–æ–∫üòâ –∏ –∞–º–±–∏—Ü–∏–π‚Ä¶üòä
‚ñÅ‚ñÇ‚ñÉ‚ñÖ‚ñÜ‚ñà–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨‚úåÔ∏è –ú–´ –†–ê–î–´ üòÅ
                            –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°!üòÅ‚ñà‚ñÜ‚ñÖ‚ñÉ‚ñÇ‚ñÅ
‚ïî‚ïê‚ïê‚ïó 
‚ïö‚ïó‚ïî‚ïù 
‚ïî‚ïù(¬Øv¬¥¬Ø) 
‚ïö‚ïê‚ïê.¬∏.¬¥you‚ù§Ô∏è‚ù§Ô∏èüòäüòò
            ";
        return $message;
    }

    /**
     * @param array $newUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getWelcomeMessageForFriendGroup(array $newUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($newUser);
        $id = $extractor->getIdFromUser($newUser);
        $message = "
      ‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì:
–ü–†–ò–í–ï–¢–ò–ö [" . $name . "](tg://user?id=" . $id .
                ") ‚ò∫Ô∏èüòò! –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!!! ü§ó–†–ê–î–´ –í–ê–° –í–ò–î–ï–¢–¨, –í –ù–ê–®–ï–ô [–ì–†–£–ü–ü–ï](tg://join?invite=" .
                $this->configuration->getWelcomeUserGroupId() . ")!üòò!–ü–†–ò–Ø–¢–ù–û–ì–û –í–ê–ú –û–ë–©–ï–ù–ò–Ø! üíñüíñüíñüíñ
            ";
        return $message;
    }

    /**
     * @param array $newUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getLeaveMessage(array $leftUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($leftUser);
        $id = $extractor->getIdFromUser($leftUser);
        $message = "
      ‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì[" . $this->configuration->getWelcomeUserName() . "](tg://user?id=" .
                $this->configuration->getWelcomeUserId() . ")‚ùÄÕçÕì‚ÄªÕçÕì‚ùÄÕçÕì:
–û—Ç –Ω–∞—Å —É—à—ë–ª [" . $name . "](tg://user?id=" . $id . "). –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á, [" . $name . "](tg://user?id=" . $id . ")! –ó–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º –µ—â—ë! üíñüíñüíñüíñ
            ";
        return $message;
    }

    /**
     * @param array $bannedUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getBanArabUserText($bannedUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($bannedUser);
        $id = $extractor->getIdFromUser($bannedUser);
        $rand = rand(1, 2);
        switch ($rand) {
            case 1:
                $message = "
     –ú–æ–¥–∂–∞—Ö–µ–¥ [" . $name . "](tg://user?id=" . $id . ") –∫ –Ω–∞–º —Å–ø—É—Å—Ç–∏–ª—Å—è —Å –≥–æ—Ä. –õ–æ–≤–∏ –±–∞–Ω, —á—ë—Ä—Ç —É—à–∞—Å—Ç—ã–π! üëäüëäüëä
            ";
                break;
            case 2:
            default:
                $message = "
     –í —á–∞—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–æ–¥–∂–∞—Ö–µ–¥ [" . $name . "](tg://user?id=" . $id . ")! –ö–∞—Ç–∏—Å—å –æ—Ç—Å—é–¥–∞, —à–∞–∫–∞–ª! üëä
            ";
                break;
        }
        return $message;
    }

    /**
     * @param array $bannedUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getSpamUserText($bannedUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($bannedUser);
        $id = $extractor->getIdFromUser($bannedUser);
        $rand = rand(1, 2);
        switch ($rand) {
            case 1:
                $message = "
     –ó–∞ —Å–ø–∞–º [" . $name . "](tg://user?id=" . $id . ") —É—Ç–∏—Ö–æ–º–∏—Ä–µ–Ω. –Ø —Ç–µ–±—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª, –ø—ë—Å! üò°üò°üò°
            ";
                break;
            case 2:
            default:
                $message = "
     –ó–∞ —Ä–µ–∫–ª–∞–º—É [" . $name . "](tg://user?id=" . $id . ") –≤ –±–∞–Ω –ø–æ–ø–∞–ª! –£–π–º–∏—Å—å, —Å–æ–±–∞–∫–∞! üò§üò§üò§
            ";
                break;
        }
        return $message;
    }

    /**
     * @param array $bannedUser
     * @param ContentExtractor $extractor
     * @return string
     */
    public function getForwardUserText($bannedUser, ContentExtractor $extractor): string
    {
        $name = $extractor->getNameFromUser($bannedUser);
        $id = $extractor->getIdFromUser($bannedUser);
        $rand = rand(1, 2);
        switch ($rand) {
            case 1:
                $message = "
     [" . $name . "](tg://user?id=" . $id . "), –Ω–µ –∫–∏–¥–∞–π —Ä–µ–ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –≤–µ—Ä–±–ª—é–¥! –ü–µ–Ω–¥–µ–ª—è –ø–æ–ª—É—á–∏—à—å!  üò°
            ";
                break;
            case 2:
            default:
                $message = "
      [" . $name . "](tg://user?id=" . $id . "), –Ω–µ –∫–∏–¥–∞–π —Ä–µ–∫–ª–∞–º—É —á–∞—Ç–æ–≤, —á–µ—Ä—Ç–∏–ª–∞! –©–∞—Å –≤ –±–∞–Ω —É–ª–µ—Ç–∏—à—å! üò°
            ";
                break;
        }
        return $message;
    }

    /**
     * @return string
     */
    public function getChannelPostFooter($channelId): string
    {
        $footer = ' 
Ô∏è<a href="' . $this->configuration->getChannelFooterLink($channelId) . '">' . $this->configuration->getChannelFooterText($channelId) . '</a>';
        return $footer;
    }

    /**
     * @param int | null $likes
     * @param int | null $dislikes
     * @return string
     */
    public function getChannelFooterKeyboard($likes = null, $dislikes = null): string
    {
        return '';
        if ($likes !== null) {
            $likes = ' ' . $likes;
        }
        if ($dislikes !== null) {
            $dislikes = ' ' . $dislikes;
        }
        $keyboard = ["inline_keyboard" => [[
            [
                "text" => "üëç" . $likes,
                'callback_data' => 'channel_like'
            ],
            [
                "text" => "üíî" . $dislikes,
                'callback_data' => 'channel_dislike'
            ]
                ],
                [
                    [
                        "text" => $this->configuration->getFooterText2(),
                        "url" => $this->configuration->getFooterLink2()
                    ]
                ]
            ]
        ];
        $keyboard = json_encode($keyboard);
        return $keyboard;
    }

}
